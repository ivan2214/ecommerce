// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleUser {
  USER
  PRODUCT_MANAGER
  SUPER_ADMIN
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH_ON_DELIVERY
  PAYPAL
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String    @unique
  hashedPassword          String?
  emailVerified           DateTime?
  image                   String?
  isTwoFactorEnabled      Boolean   @default(false)
  twoFactorConfirmationId String?

  cart                  Cart?
  twoFactorConfirmation TwoFactorConfirmation?

  roleUser RoleUser @default(USER)

  orders    Order[]
  reviews   Review[]
  favorites Favorite[]
  addresses Address[]
  accounts  Account[]
  sessions  Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String @unique

  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id    String @id @default(cuid())
  token String @unique

  email   String
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id    String @id @default(cuid())
  token String @unique

  email   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id    String @id @default(cuid())
  token String @unique

  email   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id   String @id @default(cuid())
  slug String @unique

  name        String
  description String?
  image       String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id   String @id @default(cuid())
  slug String @unique

  name        String
  description String?
  image       String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String  @id @default(cuid())
  slug        String? @unique
  discount    Float   @default(0)
  stock       Int     @default(0)
  featured    Boolean @default(false)
  rating      Float   @default(0)
  hasDiscount Boolean @default(false)

  name          String
  description   String
  price         Float
  originalPrice Float
  images        String[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  brand      Brand?   @relation(fields: [brandId], references: [id])
  brandId    String?

  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  favorites  Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brandId])
  @@index([categoryId])
}

model Cart {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([productId])
}

model Order {
  id String @id @default(cuid())

  total           Float
  shippingAddress String

  status        OrderStatus   @default(PROCESSING)
  paymentMethod PaymentMethod

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderItem {
  id String @id @default(cuid())

  quantity Int
  price    Float

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([orderId])
}

model Review {
  id String @id @default(cuid())

  rating  Int
  comment String?

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
}

model Favorite {
  id String @id @default(cuid())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([productId])
}

model Address {
  id        String  @id @default(cuid())
  isDefault Boolean @default(false)

  street     String
  city       String
  state      String
  postalCode String
  country    String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
